ALU3d-Grid library
===================

License
-------

The ALU3d-Grid library and headers are licensed under the GNU Lesser GPL
version 2.1. The full license text can be found in the file COPYING
and via http://www.gnu.org/licenses/lgpl.html


Compiler 
--------

The ALU3d-Grid code in known to compiler with the GNU Compiler version 3.4.x or higher. 
Also with the INTEL C++ Compiler version 8.1 or higher the code compiles.
Furthermore the code compiles with the IBM xlC compiler version 6 or higher. 

The compiler can be choosen by editing the fields COMP and CXXCOMP in the
*.opts files. For parallel computations the MPI compiler, like mpiCC should
be used or the include path and lib path adapted. 


Getting started
---------------

To compile the library ALU3d-Grid has to check several components of
your system. Run

  ./configure

to commence those tests. See ./configure --help for deatil help on optins. 
If you intend to use the parallel version of the
grid, make sure that you have a version of MPI, and METIS (--with-metis=PATH), and 
PARTY (--with-party=PATH) and supply the respective flags to the 
configure script. Dynamic load balancing can only be used if either METIS
or PARTY Lib or both are linked to the ALU3d-Grid Library.

For parallel computation MPI is needed, common packages are 
MPICH (version 1.2.5 or higher) or LAM MPI (version 7.x).
To compile the parallel version of the library use the MPI compiler script
(i.e. mpiCC) by passing this as CXX variable to the configure script 
(i.e. ./configure CXX=mpiCC). If not using the MPI compiler scripts just
make sure that all include path and library paths are set the right way.

For example to compile the parallel version of ALU3d-Grid the configure
command can look as follows: 

./configure CXX=mpiCC --with-metis="metis_path" --with-party="partylib_path"

For METIS (version 4.0 or higher) see http://www-users.cs.umn.edu/~karypis/metis/metis/ ,
see also the section Known bugs, when you using METIS. 
For PARTY Lib (version 1.1 or higher) see http://wwwcs.upb.de/fachbereich/AG/monien/RESEARCH/PART/party.html .

You can use

  ./configure --prefix=PATH

if you don't want ALU3d-Grid to be installed into the default directory
(i.e. the path were ALU3d-Grid was unpacked).

After configuration

  make
  make install

build and install ALU3d-Grid.  


Debug Options
--------------

There are serveral debug options that can be set an shell environment
variable and that forces the code to produce debug output. To use this
feature, the code must be compiled without the CPP variable NDEBUG set. 
The following shell environment variables can be set to a level of 
verbosity (higher is better).

VERBOSE      general verbose output  
VERBOSE_MGB  output produced by the macro grid builder 
VERBOSE_LDB  output produced while partitioning. 
VERBOSE_PLL  output produced by parallel grid methods


Optimization 
-------------

The ALU3d-Grid code is highly riddled with assert statements. 
Therefore it is recommened to compile the library and the application code
with the CPP variable NDEBUG set (i.e. -DNDEBUG) to avoid all asserts
statement tests. 

Known bugs: On Intel ia64 architectures the optimisation option -O3 dosen't
work with the INTEL C++ Compiler. 


Knowns Bugs 
-----------

Intel ia64 architectures: On Intel ia64 architectures the 
optimisation option -O3 dosen't work with the INTEL C++ Compiler. 

METIS bug: 

If you want to use the METIS library for partitioning, comment 
in the metis_dir/Lib/proto.h line 462 the function declaration 
int log2(int);

This bug has been reported and hopefully will be fixed soon.

