Changed from version 1.12 --> 1.13

changes:
- is conform with new C++ standard (i.e. g++-4.3.2 -std=c++0x)

Index: serial/gitter_impl.h
===================================================================
--- serial/gitter_impl.h	(revision 1036)
+++ serial/gitter_impl.h	(revision 1041)
@@ -85,7 +85,7 @@
             // these methods are overloades just on HbndPll
             virtual const ghostpair_STI & getGhost () const
             { 
-              static ghostpair_STI p(0,-1); 
+              static ghostpair_STI p( (helement_STI *)0, -1); 
               return p;
             }
 
@@ -131,7 +131,7 @@
             // these methods are overloades just on HbndPll
             virtual const ghostpair_STI & getGhost () const 
             { 
-              static ghostpair_STI p(0,-1); 
+              static ghostpair_STI p( (helement_STI *)0, -1); 
               return p;
             }
 
Index: serial/ghost_elements.h
===================================================================
--- serial/ghost_elements.h	(revision 1036)
+++ serial/ghost_elements.h	(revision 1041)
@@ -183,7 +183,9 @@
   MacroGhostTetra( BuilderIF & bi, 
                    MacroGhostInfoTetra * allp, 
                    const hface3_GEO * face) :
-    _mgb(bi) , _ghInfoPtr(allp) , _ghostPair(0,-1) 
+    _mgb(bi), 
+    _ghInfoPtr( allp ), 
+    _ghostPair( (GhostElement_t *)0 , -1) 
   { 
     MacroGhostBuilder & mgb = _mgb;
     MacroGhostInfoTetra& ghInfo = *_ghInfoPtr;
@@ -240,7 +242,9 @@
   //nicht mit -1 durchmultiplizieren zu muessen fuer anderen Geist
   MacroGhostTetra( BuilderIF & bi, MacroGhostInfoTetra * allp, 
       Gitter::Geometric::tetra_GEO * orig, double (&vec)[3] , double sign) :
-    _mgb(bi) , _ghInfoPtr(allp), _ghostPair(0,-1)
+    _mgb(bi), 
+    _ghInfoPtr(allp), 
+    _ghostPair( (GhostElement_t *)0, -1)
   {
     MacroGhostInfoTetra& ghInfo = *_ghInfoPtr; 
 
@@ -318,7 +322,9 @@
 public:
   // constructor 
   MacroGhostHexa( BuilderIF & bi, MacroGhostInfoHexa* allp, const hface4_GEO * face) :
-    _mgb(bi) , _ghInfoPtr(allp) , _ghostPair(0,-1) 
+    _mgb(bi), 
+    _ghInfoPtr(allp), 
+    _ghostPair( (GhostElement_t *)0 , -1) 
   { 
     MacroGhostBuilder & mgb = _mgb;
     MacroGhostInfoHexa& ghInfo = *_ghInfoPtr;
Index: duneinterface/gitter_dune_pll_impl.cc
===================================================================
--- duneinterface/gitter_dune_pll_impl.cc	(revision 1036)
+++ duneinterface/gitter_dune_pll_impl.cc	(revision 1041)
@@ -781,7 +781,7 @@
 
   const bool containsElements = elementData.contains(3,0);
   
-  pair < ElementPllXIF_t *, int > bnd(0,-1);
+  pair < ElementPllXIF_t *, int > bnd( ( ElementPllXIF_t * ) 0 , -1);
 
   // temporary object buffer  
   for (iter->first () ; ! iter->done () ; iter->next ()) 
@@ -927,7 +927,8 @@
       if( interiorLeaf )
       {
         pair < ElementPllXIF_t *, int > pll = face.accessPllX ().accessInnerPllX () ;
-        pair < Gitter::helement_STI* , Gitter::hbndseg_STI * > p (0,0);
+        pair < Gitter::helement_STI* , Gitter::hbndseg_STI * > 
+          p ( (Gitter::helement_STI *) 0, (Gitter::hbndseg_STI *) 0);
 
         pll.first->getAttachedElement( p );
         assert( p.first );
Index: parallel/gitter_hexa_top_pll.h
===================================================================
--- parallel/gitter_hexa_top_pll.h	(revision 1036)
+++ parallel/gitter_hexa_top_pll.h	(revision 1041)
@@ -167,7 +167,7 @@
 }
 
 template < class A, class X, class MX > inline Hbnd4PllInternal < A, X, MX > :: HbndPll :: 
-HbndPll (myhface4_t * f, int t, ProjectVertex *ppv, Gitter * grd) : A (f,t,ppv,grd), _ext (*this) , _ghostPair(0,-1) {
+HbndPll (myhface4_t * f, int t, ProjectVertex *ppv, Gitter * grd) : A (f,t,ppv,grd), _ext (*this) , _ghostPair((helement_STI *) 0 ,-1) {
   return ;
 }
 
Index: parallel/gitter_pll_sti.h
===================================================================
--- parallel/gitter_pll_sti.h	(revision 1036)
+++ parallel/gitter_pll_sti.h	(revision 1041)
@@ -248,6 +248,8 @@
   protected :
     typedef Gitter :: Geometric :: hasFace4 :: balrule_t balrule_t ;
     typedef Gitter :: ghostpair_STI ghostpair_STI;
+    typedef Gitter :: helement_STI  helement_STI;
+    
     virtual ~ElementPllXIF () {}
   public :
     virtual pair < ElementPllXIF_t *, int > accessOuterPllX (const pair < ElementPllXIF_t *, int > &, int) = 0 ;
@@ -259,7 +261,7 @@
     { 
       cerr << "ERROR: method getGhost of Interface class should not be used! in: " << __FILE__ << " line: " <<__LINE__<<"\n";
       abort(); 
-      return ghostpair_STI (0,-1); 
+      return ghostpair_STI ( (helement_STI*)0 , -1); 
     }
 
     virtual int ghostLevel () const
Index: parallel/gitter_tetra_top_pll.h
===================================================================
--- parallel/gitter_tetra_top_pll.h	(revision 1036)
+++ parallel/gitter_tetra_top_pll.h	(revision 1041)
@@ -166,7 +166,7 @@
 
 template < class A, class X, class MX > inline Hbnd3PllInternal < A, X, MX > :: HbndPll :: 
 HbndPll (myhface3_t * f, int t, ProjectVertex *ppv , Gitter * grd )
-  : A (f,t,ppv,grd), _ext (*this), _ghostPair(0,-1) {
+  : A (f,t,ppv,grd), _ext (*this), _ghostPair( (helement_STI *) 0, -1) {
   return ;
 }
 
